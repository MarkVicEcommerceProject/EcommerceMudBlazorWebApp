@inherits LayoutComponentBase
@using Components.Layout
@using ECommerceMudblazorWebApp.Components.Admin.Shared

<CascadingValue Value="@_isDarkMode" Name="IsDarkMode">
    <MudThemeProvider Theme="_theme" IsDarkMode="_isDarkMode" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudLayout>
        <MudAppBar Elevation="1" Color="Color.Default">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                OnClick="DrawerToggle" />

            <MudText Typo="Typo.h5" Class="ml-3 font-bold tracking-wide --mud-palette-text-primary" Style="color: var(--mud-palette-appbar-text)">
                Blazored Electronics
            </MudText>

            <MudSpacer />

            <MudTooltip Text="@(_isDarkMode ? "Auto Mode" : "Dark Mode")">
                <MudIconButton Icon="@DarkLightModeButtonIcon" Color="Color.Inherit" OnClick="DarkModeToggle" />
            </MudTooltip>

            <MudMenu>
                <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
                <MudMenuItem>Profile</MudMenuItem>
                <MudMenuItem>Settings</MudMenuItem>
            </MudMenu>
        </MudAppBar>

        <MudDrawer ClipMode="DrawerClipMode.Always" Elevation="2" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true"
            Breakpoint="Breakpoint.None" @bind-Open="_drawerOpen" Class="">
            <NavMenu />
        </MudDrawer>

        <MudMainContent Class="pt-16 px-4 py-6 transition-all">
            @Body
        </MudMainContent>
    </MudLayout>
</CascadingValue>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">ðŸ—™</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudTheme _theme = new();

    protected override void OnInitialized()
    {
        _theme = new MudTheme
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties { DefaultBorderRadius = "6px" }
        };
        base.OnInitialized();
    }

    private void DrawerToggle() => _drawerOpen = !_drawerOpen;

    private void DarkModeToggle() => _isDarkMode = !_isDarkMode;

    private readonly PaletteLight _lightPalette = new()
    {
        Primary = "#6A5ACD",
        Secondary = "#4FD1C5",
        Background = "#e7ebe8",
        Black = "#110e2d",
        AppbarText = "#ffffff",
        AppbarBackground = "#102542",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
        TextPrimary = "#101828"
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7C78A5",
        Secondary = "#4FD1C5",
        Tertiary = "#5E5B7C",
        Background = "#1F1C2C",
        Surface = "#2A2740",
        AppbarBackground = "#1F1C2C",
        AppbarText = "#ffffff",
        DrawerBackground = "#2A2740",
        TextPrimary = "#F5F5F7",
        TextSecondary = "#B2B1BF",
        DrawerText = "#ffffff",
        Success = "#6EE7B7",
        Warning = "#FCD34D",
        Error = "#FCA5A5",
        Info = "#93C5FD",
        ActionDefault = "#928DAB",
        LinesDefault = "#39364E"
    };

    private string DarkLightModeButtonIcon => _isDarkMode
    ? Icons.Material.Rounded.AutoMode
    : Icons.Material.Outlined.DarkMode;
}