@page "/admin/products"
@using ECommerceMudblazorWebApp.Components.Admin.Services
@using ECommerceMudblazorWebApp.Components.Admin.Shared
@using ECommerceMudblazorWebApp.Models
@attribute [Authorize(Roles = "Admin")]
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Product Management</PageTitle>

<section class="mx-auto py-6 md:w-1/3">
    <MudLink Href="/admin/products/create" Class="mud-button mud-button-filled mud-button-primary">
        Create New Product
    </MudLink>
</section>

<section class="md:m-2" >
    <MudTable Items="FilteredItems" Striped="true" Hover="true" SortLabel="Sort by" FilterLabel="Filter by" T="Product">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Products</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Product, object>(p => p.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Product, object>(p => p.Price)">Price</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Product Name">@context.Name</MudTd>
            <MudTd DataLabel="Price">Ksh. @context.Price.ToString("N2")</MudTd>
            <MudTd DataLabel="Actions" Class="flex justify-center align-middle">
                <MudTooltip Text="View Product Details">
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Primary" Href="@($"/admin/products/details/{context.Id}")">
                        View
                    </MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Edit Product" Color="Color.Info">
                    <MudIconButton Href="@($"/admin/products/edit/{context.Id}")" Icon="@Icons.Material.Filled.Edit" Color="Color.Success">
                        Edit
                    </MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Delete Product" Color="Color.Error">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" onclick="@((e)=> openDialogAsync(context.Id,context.Name,context.Description))" Color="Color.Error">
                        Delete
                    </MudIconButton>
                </MudTooltip>
                
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 5, 10, 20 }" />
        </PagerContent>
    </MudTable>
</section>

@code {
    private string searchString1 = string.Empty;
    private List<Product> products = new();

    private IEnumerable<Product> FilteredItems => string.IsNullOrWhiteSpace(searchString1)
        ? products
        : products.Where(p => p.Name.Contains(searchString1, StringComparison.OrdinalIgnoreCase)).ToList();

    private async Task openDialogAsync(int productId,string name,string description)
    {
        var parameters = new DialogParameters
        {
            {nameof(DeleteDialog.ItemId), productId },
            {nameof(DeleteDialog.ItemName), name },
            {nameof(DeleteDialog.ItemDescription), description },
            {nameof(DeleteDialog.OnConfirmDelete),EventCallback.Factory.Create<int>(this,DeleteProductAsync)}
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var dialogReference = await DialogService.ShowAsync<DeleteDialog>("Delete Product", parameters, options);

        var result = await dialogReference.Result;
        if (!result.Canceled)
        {
            // Optionally refresh the list or navigate
            Snackbar.Add("Product deleted successfully.", Severity.Success);
            NavigationManager.NavigateTo("/admin/products", forceLoad: true);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        products = (await ProductService.GetAllProductsAsync()).ToList();
    }
    private async Task DeleteProductAsync(int id)
    {
        await ProductService.DeleteProductAsync(id);
    }


}
