@page "/admin/categories"
@using ECommerceMudblazorWebApp.Components.Admin.Services
@using ECommerceMudblazorWebApp.Models
@inject ICategoryService CategoryService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Nav

<PageTitle>Categories</PageTitle>

<MudPaper Class="p-4">
    <section class="mx-auto md:w-1/3">
        <MudText Typo="Typo.h5" Class="text-center">Manage Categories</MudText>

        <MudButton StartIcon="@Icons.Material.Filled.Add"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   Class="my-2 md:w-full mx-auto"
                   OnClick="@(() => Nav.NavigateTo("/admin/categories/create"))">
            Create New Category
        </MudButton>
    </section>

    <MudTable Items="filteredProducts" Hover="true" Bordered="true" Striped="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Products</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Slug</MudTh>
            <MudTh>Parent</MudTh>
            <MudTh>Child Categories</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Slug">@context.Slug</MudTd>
            <MudTd DataLabel="Parent" Class="text-center">@(context.ParentCategory?.Name ?? "â€”")</MudTd>
            <MudTd DataLabel="Child categories">@(string.Join(", ", context.ChildCategories?.Select(c => c.Name)) ?? "-")</MudTd>

            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                            Color="Color.Error"
                            OnClick="@((e) => openDialogAsync(context.Id, context.Name, context.Description))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<Category> _categories = [];
    private string? searchString;

    private IEnumerable<Category> filteredProducts => string.IsNullOrWhiteSpace(searchString)
        ? _categories
        : _categories.Where(c => c.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();

    private async Task openDialogAsync(int categoryId, string name, string description)
    {
        var parameters = new DialogParameters
        {
            {nameof(DeleteDialog.ItemId), categoryId },
            {nameof(DeleteDialog.ItemName), name },
            {nameof(DeleteDialog.ItemDescription), description },
            {nameof(DeleteDialog.OnConfirmDelete),EventCallback.Factory.Create<int>(this,DeleteCategoryAsync)}
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var dialogReference = await DialogService.ShowAsync<DeleteDialog>("Delete Category", parameters, options);

        var result = await dialogReference.Result;
        if (!result.Canceled)
        {
            // Optionally refresh the list or navigate
            Snackbar.Add("Category deleted successfully.", Severity.Success);
            Nav.NavigateTo("/admin/categories", forceLoad: true);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        _categories = (await CategoryService.GetAllAsync()).ToList();
    }

    private async Task DeleteCategoryAsync(int id)
    {
        await CategoryService.DeleteAsync(id);
    }

}
