@inherits LayoutComponentBase
@implements IDisposable
@using Components.Layout
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<BaseLayout>
    @if (!authChecked)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="ma-auto" />
    }
    else if (!isAuthenticated)
    {
        @if (IsAuthPage)
        {
            <MudGrid Justify="Justify.SpaceBetween" Class="min-h-screen">
                <MudItem xs="12" md="6">
                    <MudPaper Class="pa-6">
                        <img src="images/dl.beatsnoop1.png" alt="Auth Banner" style="width:100%;" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" md="6" Class="flex items-center justify-center">
                    <MudPaper Class="pa-6 w-full">
                        @Body
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
        else
        {
            NavigationManager.NavigateTo("account/login", forceLoad: true);
        }
    }
    else
    {
        <MudLayout>
            <AppBar ToggleDrawerCallback="ToggleDrawer"
                    IsAuthenticated="isAuthenticated"
                    UserName="@userName"
                    CurrentUrl="@currentUrl" />

            <MudDrawer @bind-Open="@drawerOpen"
                       Variant="@DrawerVariant.Temporary"
                       Elevation="1"
                       OverlayAutoClose="true"
                       Class="mud-theme-default"
                       >

                <MudNavMenu>
                    <MudNavLink Href="/" Match="NavLinkMatch.All">Home</MudNavLink>
                    <MudNavLink Href="/contact">Contact</MudNavLink>
                    <MudNavLink Href="/about">About</MudNavLink>
                    <MudNavLink Href="/account/register">Signup</MudNavLink>

                    @if (isAuthenticated)
                    {
                        <MudNavLink Href="Account/Manage" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
                        <div class="relative">
                            <MudIconButton Href="/cart" Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Medium">My cart</MudIconButton>

                        </div>
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <MudIconButton Icon="@Icons.Material.Filled.Logout"
                                           Color="Color.Inherit"
                                           Class="text-white"
                                           ButtonType="ButtonType.Submit"
                                           AriaLabel="Logout" />
                        </form>
                    }
                    else
                    {
                        <MudNavLink Href="/account/login" Icon="@Icons.Material.Filled.Lock">Login</MudNavLink>
                    }
                </MudNavMenu>
            </MudDrawer>

            <MudMainContent Class="pt-16 transition-all duration-300">
                @Body
            </MudMainContent>

            <Footer />
        </MudLayout>
    }
</BaseLayout>

@code {
    private bool drawerOpen = false;
    private bool isAuthenticated = false;
    private bool authChecked = false;
    private string? userName;
    private string? currentUrl;

    private string CurrentRoute => NavigationManager.ToBaseRelativePath(NavigationManager.Uri).ToLower();
    private bool IsAuthPage => CurrentRoute.StartsWith("account/login") ||
                            CurrentRoute.StartsWith("account/register") ||
                            CurrentRoute.StartsWith("account/forgotpassword") ||
                            CurrentRoute.StartsWith("account/resendemailconfirmation") ||
                            CurrentRoute.StartsWith("account/confirmemail");


    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        await CheckAuthState();
    }

    private async Task CheckAuthState()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        userName = user.Identity?.Name;
        authChecked = true;

        if (isAuthenticated && IsAuthPage)
        {
            NavigationManager.NavigateTo("/");
        }

        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        _ = CheckAuthState();
        StateHasChanged();
        drawerOpen = false;
    }

    private void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }


    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        GC.SuppressFinalize(this);
    }
}