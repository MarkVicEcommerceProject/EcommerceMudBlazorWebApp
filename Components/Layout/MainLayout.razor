@inherits LayoutComponentBase
@implements IDisposable
@using Components.Layout
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<BaseLayout>
    @if (!authChecked)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (!isAuthenticated)
    {
        @if (IsAuthPage)
        {
            <MudGrid Justify="Justify.SpaceBetween" Class="min-h-screen">
                <MudItem xs="12" md="6">
                    <MudPaper Class="pa-6">
                        <img src="images/dl.beatsnoop1.png" alt="Auth Banner" style="width:100%;" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" md="6" Class="flex items-center justify-center">
                    <MudPaper Class="pa-6 w-full">
                        @Body
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
        else
        {
            NavigationManager.NavigateTo("account/login", forceLoad: true);
        }
    }
    else
    {
        <MudLayout>
            <!-- Responsive AppBar -->
            <MudAppBar Elevation="1" Color="Color.Success" Class="h-14">
                <div class="font-inter flex w-full items-center justify-between text-lg text-black md:px-4">
                    <!-- Left Section: hamburger + brand -->
                    <div class="flex items-center space-x-2">
                        <!-- Hamburger: only on small screens -->
                        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                                       Color="Color.Inherit"
                                       AriaLabel="Open navigation menu"
                                       Class="font-inter text-white md:hidden"
                                       OnClick="@ToggleDrawer" />
                        <!-- Mobile logo: B.E. (visible on small screens) -->
                        <MudNavLink Href="/" Match="NavLinkMatch.All" Class="md:hidden">
                            <MudText Typo="Typo.h6" Class="font-inter cursor-pointer font-bold text-black">
                                B.E.
                            </MudText>
                        </MudNavLink>

                        <!-- Desktop logo: Full text (visible on medium and up) -->
                        <MudNavLink Href="/" Match="NavLinkMatch.All" Class="hidden md:inline">
                            <MudText Typo="Typo.h6" Class="hidden cursor-pointer font-bold text-black">
                                BLAZORED ELECTRONICS
                            </MudText>
                        </MudNavLink>

                    </div>

                    <!-- Center Section: desktop nav links (hidden on small) -->
                    <div class="font-inter hidden space-x-4 md:flex">
                        <MudNavLink Href="/" Match="NavLinkMatch.All"
                                    Class="text-xlg font-sans text-black transition-colors hover:text-gray-200">
                            Home
                        </MudNavLink>
                        <MudNavLink Href="/contact" Class="text-black transition-colors hover:text-gray-200">
                            Contact
                        </MudNavLink>
                        <MudNavLink Href="/about" Class="text-black transition-colors hover:text-gray-200">
                            About
                        </MudNavLink>
                        <MudNavLink Href="/account/register" Class="text-black transition-colors hover:text-gray-200">
                            Signup
                        </MudNavLink>
                    </div>

                    <!-- Right Section: auth/search (always visible) -->
                    <div class="flex items-center space-x-4">
                        <MudIconButton Icon="@Icons.Material.Filled.Search"
                                       Color="Color.Inherit"
                                       Class="text-black"
                                       AriaLabel="Search" />
                        <AuthorizeView>
                            <Authorized>
                                <MudNavLink Href="Account/Manage" Icon="@Icons.Material.Filled.Person"
                                            IconColor="Color.Inherit" Class="text-black">
                                    <p class="hidden md:inline">@userName?.Split('@')[0]</p>
                                </MudNavLink>
                                <form action="Account/Logout" method="post">
                                    <AntiforgeryToken />
                                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Logout"
                                                   Color="Color.Inherit"
                                                   Class="text-white"
                                                   ButtonType="ButtonType.Submit"
                                                   AriaLabel="Logout" />
                                </form>
                            </Authorized>
                            <NotAuthorized>
                                <MudNavLink Href="/account/login" Icon="@Icons.Material.Filled.Lock"
                                            IconColor="Color.Inherit" Class="text-white">
                                    Login
                                </MudNavLink>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                </div>
            </MudAppBar>

            <!-- Side drawer for mobile menu -->
            <MudDrawer @bind-Open="@drawerOpen"
                       Variant="DrawerVariant.Temporary"
                       Anchor="Anchor.Left"
                       Elevation="1"
                       Class="mud-theme-default">
                <MudNavMenu>
                    <MudNavLink Href="/" Match="NavLinkMatch.All">
                        Home
                    </MudNavLink>
                    <MudNavLink Href="/contact">
                        Contact
                    </MudNavLink>
                    <MudNavLink Href="/about">
                        About
                    </MudNavLink>
                    <MudNavLink Href="/account/register">
                        Signup
                    </MudNavLink>
                    @if (isAuthenticated)
                    {
                        <MudNavLink Href="Account/Manage" Icon="@Icons.Material.Filled.Person">
                            Profile
                        </MudNavLink>
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <MudIconButton Icon="@Icons.Material.Filled.Logout"
                                           Color="Color.Inherit"
                                           Class="text-white"
                                           ButtonType="ButtonType.Submit"
                                           AriaLabel="Logout" />
                        </form>
                    }
                    else
                    {
                        <MudNavLink Href="/account/login" Icon="@Icons.Material.Filled.Lock">
                            Login
                        </MudNavLink>
                    }
                </MudNavMenu>
            </MudDrawer>

            <MudMainContent Class="pt-16 transition-all duration-300">
                @Body
            </MudMainContent>
            <Footer />
        </MudLayout>
    }
</BaseLayout>


@code {
    private bool drawerOpen = false;
    private bool authMenuOpen = false;

    private void ToggleDrawer() => drawerOpen = !drawerOpen;
    private void ToggleAuthMenu() => authMenuOpen = !authMenuOpen;

    private bool isAuthenticated = false;
    private bool authChecked = false;
    private string? userName;
    private string? currentUrl;
    private string CurrentRoute => NavigationManager.ToBaseRelativePath(NavigationManager.Uri).ToLower();
    private bool IsAuthPage =>
        CurrentRoute.StartsWith("account/login") ||
        CurrentRoute.StartsWith("account/register");

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        await CheckAuthState();
    }

    private async Task CheckAuthState()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        userName = user.Identity?.Name;

        authChecked = true;

        if (isAuthenticated && IsAuthPage)
        {
            NavigationManager.NavigateTo("/home", forceLoad: true);
        }

        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        _ = CheckAuthState();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}


