@using ECommerceMudblazorWebApp.Services.Cart
@using MudBlazor
@using System.Security.Claims
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ICartService CartService
@inject CartStateService CartState
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<!-- Redesigned AppBar: Clean, Intuitive, Responsive, No functional changes -->
<MudAppBar Elevation="1" Style="background-color:#102542;" Class="font-inter shadow-sm fixed w-full
                        h-14 md:h-16">
    <!-- Left Section -->
    <div class="flex items-center space-x-3">
        <!-- Mobile: Hamburger -->
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudIconButton Icon="@Icons.Material.Filled.Menu"
                           Color="Color.Inherit"
                           Class="text-white transition-transform duration-150 ease-in-out
                                  hover:scale-110 hover:opacity-80 focus:ring-2 focus:ring-white rounded"
                           OnClick="ToggleDrawerCallback"
            />
            </MudHidden>
        
        <!-- Logo -->
        <MudNavLink Href="/" Match="NavLinkMatch.All" Class="flex items-center">
            <MudText Typo="Typo.h6" Class="font-bold text-white">
                <!-- Mobile abbr, Desktop full -->
                <span class="md:hidden">B.E.</span>
                <span class="hidden md:inline">BLAZORED ELECTRONICS</span>
            </MudText>
        </MudNavLink>
    </div>

    <MudSpacer/>

    <!-- Center Section: Primary Nav (Tablet+) -->
    <nav class="hidden md:flex space-x-6 text-white">
        <MudNavLink Href="/" Match="NavLinkMatch.All"
                    Class="transition-colors duration-150 hover:text-gray-200 focus:outline-none">
            Home
        </MudNavLink>
        <MudNavLink Href="/products"
                    Class="transition-colors duration-150 hover:text-gray-200 focus:outline-none">
            Shop
        </MudNavLink>
        <MudNavLink Href="/about"
                    Class="transition-colors duration-150 hover:text-gray-200 focus:outline-none">
            About
        </MudNavLink>
        <MudNavLink Href="/contact"
                    Class="transition-colors duration-150 hover:text-gray-200 focus:outline-none">
            Contact
        </MudNavLink>
    </nav>


    <!-- Right Section: Actions -->
    <div class="flex items-center space-x-4">
        <!-- Search Icon -->
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudTextField Placeholder="Search products..."
                      T="string"
                      Class="hidden  md:h-3/4 w-64"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      AdornmentColor="Color.Inherit"
                      Color="Color.Inherit"
                      Variant="Variant.Outlined"
                      
                      Style="background-color: #ffffff; border-radius: 4px;" />

        </MudHidden>
        
        <!-- Auth / Cart -->
        <AuthorizeView>
            <Authorized>
                <!-- Profile -->
                <MudNavLink Href="Account/Manage"
                            Icon="@Icons.Material.Filled.Person"
                            IconColor="Color.Inherit"
                            Class="text-white transition-colors duration-150 hover:text-gray-200 focus:outline-none">
                    <span class="hidden md:inline">@UserName?.Split('@')[0]</span>
                </MudNavLink>

                <!-- Cart with Badge -->
                <MudBadge BadgeColor="Color.Primary"
                          Content="@CartState.CartCount"
                          Visible="@(!IsCartEmpty)"
                          Overlap="true">
                    <MudIconButton Href="/cart"
                                   Icon="@Icons.Material.Filled.ShoppingCart"
                                   Size="Size.Medium"
                                   Class="text-white transition-transform duration-150 ease-in-out
                                          hover:scale-110 hover:opacity-80 focus:ring-2 focus:ring-white rounded" />
                </MudBadge>

                <!-- Logout -->
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@CurrentUrl" />
                    <MudIconButton Icon="@Icons.Material.Filled.Logout"
                                   Color="Color.Warning"
                                   Class="transition-transform duration-150 ease-in-out
                                          hover:scale-110 hover:opacity-80 focus:ring-2 focus:ring-white rounded"
                                   ButtonType="ButtonType.Submit"
                                   AriaLabel="Logout" />
                </form>
            </Authorized>
            <NotAuthorized>
                <!-- Cart Badge -->
                <MudBadge Content="@CartState.CartCount"
                          Visible="@(!IsCartEmpty)"
                          Overlap="true">
                    <MudIconButton Href="/cart"
                                   Icon="@Icons.Material.Filled.ShoppingCart"
                                   Size="Size.Medium"
                                   Class="text-white transition-transform duration-150 ease-in-out
                                          hover:scale-110 hover:opacity-80 focus:ring-2 focus:ring-white rounded" />
                </MudBadge>
                <!-- Login -->
                <MudNavLink Href="/account/login"
                            Icon="@Icons.Material.Filled.Lock"
                            IconColor="Color.Inherit"
                            Class="text-white transition-colors duration-150 hover:text-gray-200 focus:outline-none">
                    Login
                </MudNavLink>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</MudAppBar>

@code {
    [Parameter] public bool IsAuthenticated { get; set; }
    [Parameter] public string? UserName { get; set; }
    [Parameter] public string? CurrentUrl { get; set; }
    [Parameter] public EventCallback ToggleDrawerCallback { get; set; }

    private string? userId;
    private bool isAuthenticated;

    private bool IsCartEmpty => CartState.CartCount == 0;

    protected override async Task OnInitializedAsync()
    {
        CartState.OnChange += HandleCartStateChanged;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            isAuthenticated = true;
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            CartState.CartCount = await CartService.GetCartItemCountAsync(userId, guestId: null);
        }
        Console.WriteLine(CartState.CartCount);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isAuthenticated)
        {
            var guestId = await JSRuntime.InvokeAsync<string>("cartStorage.getGuestId");

            if (!string.IsNullOrWhiteSpace(guestId))
            {
                CartState.CartCount = await CartService.GetCartItemCountAsync(null, guestId);
                StateHasChanged();
            }
        }
    }

    private async Task HandleCartStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        CartState.OnChange -= HandleCartStateChanged;
    }
}

