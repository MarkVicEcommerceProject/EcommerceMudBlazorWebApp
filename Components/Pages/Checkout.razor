@page "/checkout"
@inject IJSRuntime JSRuntime

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using ECommerceMudblazorWebApp.Models
@using ECommerceMudblazorWebApp.Services

@inject ICartService CartService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Checkout</PageTitle>

<EditForm Model="Input" OnValidSubmit="HandleValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <MudContainer MaxWidth="MaxWidth.Large" Class="font-inter md:mt-10">
        <MudText Typo="Typo.h4" Class="mb-6 font-bold">Billing Details</MudText>

        <section class="mb-10 flex flex-col gap-y-4 md:flex-row md:gap-x-6">
            
            <!-- Left: Billing Form -->
            <section class="md:w-2/3">
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Class="font-light">First Name</MudText>
                        <MudTextField T="string" Label="First Name" @bind-Value="Input.FirstName" Required />
                        <ValidationMessage For="@(() => Input.FirstName)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Class="font-light">Email Address</MudText>
                        <MudTextField T="string" Label="Email Address" @bind-Value="Input.Email" Required />
                        <ValidationMessage For="@(() => Input.Email)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Class="font-light">Street Address</MudText>
                        <MudTextField T="string" Label="Street Address" @bind-Value="Input.StreetAddress" Required />
                        <ValidationMessage For="@(() => Input.StreetAddress)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Class="font-light">City</MudText>
                        <MudTextField T="string" Label="City" @bind-Value="Input.City" Required />
                        <ValidationMessage For="@(() => Input.City)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Class="font-light">Postal Code</MudText>
                        <MudTextField T="string" Label="Postal Code" @bind-Value="Input.PostalCode" Required />
                        <ValidationMessage For="@(() => Input.PostalCode)" />
                    </MudItem>
                </MudGrid>

                <MudCheckBox @bind-Value="Input.SaveShippingInfo" Color="Color.Secondary" Class="mt-4">
                    Save this Information for faster Checkout next time
                </MudCheckBox>
            </section>

            <!-- Right: Order Summary -->
            <MudStack Class="md:w-1/3">
                <!-- Cart Summary -->
                <div class="w-full rounded-lg bg-gray-100 p-4 shadow-md">
                    @foreach (var item in CartItems)
                    {
                        <div class="my-4 flex items-center justify-between">
                            <div class="flex items-center gap-4">
                                <img src="@item.Product.ImagePath" alt="@item.Product.Name" class="h-16 w-16 object-cover" />
                                <MudText>@item.Product.Name</MudText>
                                <MudText>(@item.Quantity)</MudText>
                            </div>
                            <MudText>Ksh @item.Product.Price.ToString("N2")</MudText>
                        </div>
                    }
                </div>

                <!-- Pricing Summary -->
                <div class="mt-4 rounded-lg p-4 shadow-md">
                    <div class="mt-3 flex justify-between">
                        <MudText>Subtotal:</MudText>
                        <MudText>Ksh @CartItems.Sum(i => i.Product.Price * i.Quantity).ToString("N2")</MudText>
                    </div>

                    <div class="mt-3 flex justify-between border-t pt-2">
                        <MudText>Shipping:</MudText>
                        <MudText>Free</MudText>
                    </div>

                    <div class="mt-3 mb-3 flex justify-between border-t pt-2 font-bold">
                        <MudText>Total:</MudText>
                        <MudText>Ksh @CartItems.Sum(i => i.Product.Price * i.Quantity).ToString("N2")</MudText>
                    </div>
                </div>

                <!-- Payment Method -->
                <div class="mt-6">
                    <MudRadioGroup T="string" Label="Payment Method" Class="md:flex md:flex-col" @bind-Value="PaymentMethod">
                        <MudRadio Value="@("CreditCard")" T="string" Color="Color.Secondary" Label="Credit Card" />
                        <MudRadio Value="@("PayPal")" T="string" Color="Color.Secondary" Label="PayPal" />
                        <MudRadio Value="@("CashOnDelivery")" T="string" Color="Color.Secondary" Label="Cash on Delivery" />
                    </MudRadioGroup>

                    <div class="mt-2 flex flex-wrap items-center gap-x-3">
                        <MudIcon Icon="@Icons.Material.Filled.Payment" />
                        <MudIcon Icon="@Icons.Material.Filled.Payment" />
                        <MudIcon Icon="@Icons.Material.Filled.MoneyOff" />
                    </div>

                    @if(PaymentMethod == "PayPal")
                    {
                        <div id="paypal-button-container" class="paypal-button-container mt-4"></div>
                        <p id="result-message"></p>
                    }

                </div>

                <!-- Coupon -->
                <div class="mt-6 flex max-w-sm gap-2">
                    <MudTextField T="string" Placeholder="Coupon Code" Variant="Variant.Outlined" Class="flex-grow" />
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary">Apply Coupon</MudButton>
                </div>

                <!-- Submit Button -->
                <MudButton 
                    ButtonType="ButtonType.Submit"
                    Variant="Variant.Filled"
                    Color="Color.Default"
                    Style="background-color:#DB4444;color:white"
                    Class="mt-6 w-full">
                    Place Order
                </MudButton>
            </MudStack>
        </section>
    </MudContainer>
</EditForm>

@code {

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private ICollection<CartItem> CartItems => CartService.ShoppingCart.Items;

    private bool _shouldInitPayPal;
    private string _paymentMethod = "CashOnDelivery";
    private string PaymentMethod
    {
        get => _paymentMethod;
        set
        {
            if (_paymentMethod == value) return;
            _paymentMethod = value;
            if (value == "PayPal")
            {
                // flag that we need to init the buttons once the DOM updates
                Console.WriteLine(PaymentMethod);
                _shouldInitPayPal = true;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldInitPayPal)
        {
            _shouldInitPayPal = false;
            await JSRuntime.InvokeVoidAsync("paypalIntegration.initButtons",
                                            "api/orders",
                                            "api/orders/{orderID}/capture");
        }
    }

    protected override void OnInitialized()
    {
        PaymentMethod = "Cash on Delivery";
    }

    private async Task HandleValidSubmitAsync()
    {
        Console.WriteLine($"Order placed for {Input.FirstName} at {Input.StreetAddress}, {Input.City}");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        Console.WriteLine($"User ID: {userId}");
        
        var order = new Order
        {
            UserId = userId,
            ShippingAddress = Input.StreetAddress,
            PaymentMethod = PaymentMethod,
            OrderItems = CartItems.Select(ci => new OrderItem {
                ProductId = ci.ProductId,
                Quantity = ci.Quantity,
                UnitPrice = ci.UnitPrice,
            }).ToList()
        };

        await OrderService.PlaceOrderAsync(order);
        CartService.ClearCart();
        NavigationManager.Refresh();
        //NavigationManager.NavigateTo("/order-confirmation");
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "First Name is required.")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Street Address is required.")]
        public string StreetAddress { get; set; } = string.Empty;

        [Required(ErrorMessage = "City is required.")]
        public string City { get; set; } = string.Empty;

        [Required(ErrorMessage = "Postal Code is required.")]
        public string PostalCode { get; set; } = string.Empty;

        public bool SaveShippingInfo { get; set; } = false;
    }
}