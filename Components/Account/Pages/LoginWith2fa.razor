@page "/Account/LoginWith2fa"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ECommerceMudblazorWebApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Two-Factor Authentication</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-10">
    <MudPaper Class="pa-8" Elevation="10">
        <MudStack Spacing="4">
            <!-- Header -->
            <MudStack Spacing="2">
                <MudText Typo="Typo.h4" Class="text-center" Color="Color.Primary">Two-Factor Authentication</MudText>
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.body1" Class="text-center">Your login is protected with an authenticator app</MudText>
            </MudStack>

            <!-- Status Message -->
            @if (!string.IsNullOrEmpty(message))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@message</MudAlert>
            }

            <!-- Form -->
            <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
                <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
                <input type="hidden" name="RememberMe" value="@RememberMe" />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <MudStack Spacing="4">
                    <!-- Authenticator Code Field -->
                    <MudStaticTextField @bind-Value="Input.TwoFactorCode"
                                  Label="Authenticator Code"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  InputType="InputType.Text"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Adornment="Adornment.Start"
                                  For="@(() => Input.TwoFactorCode)"
                                  Class="mt-4" />
                    <ValidationMessage For="@(() => Input.TwoFactorCode)" />

                    <!-- Remember Machine Checkbox -->
                    <MudStaticCheckBox @bind-Value="Input.RememberMachine"
                                 Color="Color.Primary"
                                 Label="Remember this device"
                                 Class="mt-2" />

                    <!-- Submit Button -->
                    <MudStaticButton
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               Size="Size.Large"
                               EndIcon="@Icons.Material.Filled.Login"
                               FormAction="FormAction.Submit"
                               Class="mt-4">
                        Verify & Continue
                    </MudStaticButton>
                </MudStack>
            </EditForm>

            <!-- Recovery Code Link -->
            <MudText Typo="Typo.body2" Class="mt-4 text-center">
                Don't have access to your authenticator device? You can
                <a Href="Account/LoginWithRecoveryCode?ReturnUrl=@ReturnUrl">
                    log in with a recovery code
                </a>.
            </MudText>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            message = "Invalid authenticator code. Please try again.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Authenticator code is required")]
        [StringLength(7, ErrorMessage = "Code must be between {2} and {1} characters", MinimumLength = 6)]
        public string? TwoFactorCode { get; set; }

        public bool RememberMachine { get; set; }
    }
}