@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@using ECommerceMudblazorWebApp.Data
@using MudBlazor.StaticInput

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <MudAlert Variant="Variant.Text" Severity="Severity.Warning">There are no external authentication services configured.</MudAlert>
    <MudText Typo="Typo.body1" Class="pt-4">
        See <MudLink Target="_blank" Href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</MudLink>
        about setting up this ASP.NET application to support logging in via external services
    </MudText>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <p>
                @foreach (var provider in externalLogins)
                {
                    @if(provider.Name == "Google")
                    {
                        <MudText Typo="Typo.body1" Class="pt-4 text-center">Log in using your Google account:</MudText>
                        <button type="submit" class="bg-google-buttonBlue flex items-center w-full mx-auto gap-3 rounded-full border-2 p-0.5 pr-3 transition-colors duration-300 hover:bg-google-buttonBlue-hover"
                            name="provider" value="@provider.Name" title="Log in using your @(provider.DisplayName) account">

                            <div class="flex items-center justify-center bg-white w-9 h-9 rounded-l">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-7 h-7">
                                <title >Sign in with Google</title>
                                <desc>Google G Logo</desc>
                                <path
                                    d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                                    class="fill-google-logoBlue"
                                ></path>
                                <path
                                    d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                                    class="fill-google-logoGreen"
                                ></path>
                                <path
                                    d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                                    class="fill-google-logoYellow"
                                ></path>
                                <path
                                    d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                                    class="fill-google-logoRed"
                                ></path>
                                </svg>
                            </div>
                            <span class="text-sm text-black tracking-wider">Sign in with Google</span>
                        </button>
                    }
                    else if (provider.Name == "Microsoft")
                    {
                        <MudText Typo="Typo.body1" Class="pt-4">Log in using your Microsoft account:</MudText>
                        
                    }
                    else if (provider.Name == "GitHub")
                    {
                        <MudText Typo="Typo.body1" Class="pt-4">Log in using your GitHub account:</MudText>

                    }
                }
            </p>
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
